<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>

<html>

  <body>
<h2>外观模式(迪米特法则):</h2><br/>
<br/>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
<br/>
<br/>外观类将客户端与子系统的内部复杂性分隔开
<br/>
<br/>如果一个系统有好几个子系统，每一个子系统都有一个外观类，整个系统可以有数个外观类。
<br/>
<br/>使用场景：
<br/>1.为一个复杂的子系统提供一个简单的接口。
<br/>2.客户程序与抽象类的实现部分，存在很大依赖性，将子系统与客户以及其他子系统分离，提高子系统的独立性和可移植性。
<br/>3.(bs)层次化结构中，定义每一层的入口点，子系统相互依赖，通过facade通信，简化之间的依赖关系。
<br/>4.包装或隐藏原有系统
<br/>(1)维护一个遗留的大型系统。
<br/>(2)跟踪对系统的使用——强迫所有用户通过facade使用原有系统。(代理模式)
<br/>
<br/>优点:
<br/>1.屏蔽了外部客户端和系统内部模式块的交互
<br/>2.被多个用户调用(实现复用，功能共享)
<br/>3.节省学习成本
<br/>
<br/>缺点:
<br/>不符合开放封闭原则
<br/>
<br/>本质:
<br/>封装交互，简化调用


  </body>
</html>
